{"columns": ["step", "prompt", "completion", "f", "advantage", "image"], "data": [["400", "<|im_start|>system\n\nA conversation between User and Assistant.\n\nThe User will provide an **image of a person with makeup applied**.\nThe Assistant will be provided with a **list of candidate makeup product options**.\n\nYour task is to:\n1. Analyze the makeup look in the image.\n2. Compare it against the provided product options.\n3. Output a JSON list of parameter sets that best represent the makeup observed.\n\n---\n\n## Makeup Option Format\n\nEach output object must follow this exact structure:\n\n- **shape**: Makeup shape (string, must match one from the shape reference below).\n- **color**: RGB values with keys \"r\", \"g\", \"b\", each between 0\u2013255.\n- **alpha**: Integer between 0\u2013255 (opacity).\n- **sigma**: Integer (blur strength).\n- **gamma**: Integer. If a shape does not define a gamma meaning in the reference, set **gamma = 0**.\n\n---\n\n## Detailed Makeup Shape Reference\n\n**Base / Face**\n- `FACE_BASIC` \u2014 Gamma: removes pixels darker than this HSV value\n\n**Eyebrow**\n- `EYEBROW_BASIC` (gamma = 0)\n\n**Eyeshadow**\n- `EYESHADOW_OVEREYE_FULL_BASIC` \u2014 Gamma: width (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_BASIC` (gamma = 0)\n- `EYESHADOW_OVEREYE_OUTER_BASIC` (gamma = 0)\n- `EYESHADOW_INNEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_TRI_BASIC` (gamma = 0)\n\n**Shimmer pearl Eyeshadows**\n- `EYESHADOW_OVEREYE_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_OUTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_INNEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_LOWEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n\n**Glitter Eyeshadows**\n- `EYESHADOW_OVEREYE_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_CENTER_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_OUTER_GL` - Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_LOWEREYE_GL` - Alpha: glitter amount, Gamma: glitter brightness\n\n**Eyeliner**\n- `EYELINER_FILL_BASIC` \u2014 Gamma: line width (0\u2013100)\n- `EYELINER_TAIL_DOWN_SHORT_BASIC` \u2014 Gamma: line width (0\u2013100)\n\n**Nose Contouring**\n- `NOSE_SHADING_FULL_BASIC` (gamma = 0)\n- `NOSE_SHADING_LONG_BASIC` (gamma = 0)\n- `NOSE_SHADING_SHORT_BASIC` (gamma = 0)\n\n**Blusher**\n- `BLUSHER_SIDE_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_CENTER_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_TOP_SLIM_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_SIDE_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_CENTER_BASIC` (gamma = 0)\n\n**Highlighter**\n- `HIGHLIGHTER_EYES_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHEEKBONE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSE_BRIDGE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSETIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_FOREHEAD_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_EYELID_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_INNEREYE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHINTIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n\n**Lip**\n- `LIP_FULL_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n- `LIP_THIN_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n\n---\n\n## Output Instruction\n\n- Wrap your final answer in `<answer></answer>` tags.\n- Always output a **JSON list** with **one or more objects**.\n- Output **only** the JSON (no explanations, names, or extra text).\n\n---\n\n## Example Output\n\n```json\n<answer>\n[\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 127,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>\n<|im_end|>\n<|im_start|>user\n<|vision_start|><|image_pad|><|vision_end|>\nAnalyze the attached face image and output a JSON list (length \u2265 1) of parameter sets that best match the observed makeup.\n\nOutput rules:\n- Return ONLY a JSON list wrapped in <answer>\u2026</answer>.\n- Each object must have the following fields:\n  {\n    \"shape\": <a valid shape from the Detailed Makeup Shape Reference>,\n    \"color\": {\"r\": 0\u2013255, \"g\": 0\u2013255, \"b\": 0\u2013255} (integers),\n    \"alpha\": 0\u2013255 (integer),\n    \"sigma\": integer,\n    \"gamma\": integer (if the shape defines gamma, use its value; if not, set gamma = 0)\n  }\n- Do not include explanations or extra text.\n<|im_end|>\n<|im_start|>assistant\n", "<answer>\n[\n  {\n    \"shape\": \"FACE_BASIC\",\n    \"color\": { \"r\": 173, \"g\": 139, \"b\": 111 },\n    \"alpha\": 255,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYEBROW_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 255,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYESHADOW_OVEREYE_FULL_BASIC\",\n    \"color\": { \"r\": 180, \"g\": 160, \"b\": 128 },\n    \"alpha\": 255,\n    \"sigma\": 64,\n    \"gamma\": 50\n  },\n  {\n    \"shape\": \"NOSE_SHADING_FULL_BASIC\",\n    \"color\": { \"r\": 173, \"g\": 139, \"b\": 111 },\n    \"alpha\": 255,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 221, \"g\": 180, \"b\": 147 },\n    \"alpha\": 255,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 187, \"g\": 136, \"b\": 103 },\n    \"alpha\": 255,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>", 0.20000000298023224, 0.40120476484298706, "Image"], ["400", "<|im_start|>system\n\nA conversation between User and Assistant.\n\nThe User will provide an **image of a person with makeup applied**.\nThe Assistant will be provided with a **list of candidate makeup product options**.\n\nYour task is to:\n1. Analyze the makeup look in the image.\n2. Compare it against the provided product options.\n3. Output a JSON list of parameter sets that best represent the makeup observed.\n\n---\n\n## Makeup Option Format\n\nEach output object must follow this exact structure:\n\n- **shape**: Makeup shape (string, must match one from the shape reference below).\n- **color**: RGB values with keys \"r\", \"g\", \"b\", each between 0\u2013255.\n- **alpha**: Integer between 0\u2013255 (opacity).\n- **sigma**: Integer (blur strength).\n- **gamma**: Integer. If a shape does not define a gamma meaning in the reference, set **gamma = 0**.\n\n---\n\n## Detailed Makeup Shape Reference\n\n**Base / Face**\n- `FACE_BASIC` \u2014 Gamma: removes pixels darker than this HSV value\n\n**Eyebrow**\n- `EYEBROW_BASIC` (gamma = 0)\n\n**Eyeshadow**\n- `EYESHADOW_OVEREYE_FULL_BASIC` \u2014 Gamma: width (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_BASIC` (gamma = 0)\n- `EYESHADOW_OVEREYE_OUTER_BASIC` (gamma = 0)\n- `EYESHADOW_INNEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_TRI_BASIC` (gamma = 0)\n\n**Shimmer pearl Eyeshadows**\n- `EYESHADOW_OVEREYE_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_OUTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_INNEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_LOWEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n\n**Glitter Eyeshadows**\n- `EYESHADOW_OVEREYE_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_CENTER_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_OUTER_GL` - Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_LOWEREYE_GL` - Alpha: glitter amount, Gamma: glitter brightness\n\n**Eyeliner**\n- `EYELINER_FILL_BASIC` \u2014 Gamma: line width (0\u2013100)\n- `EYELINER_TAIL_DOWN_SHORT_BASIC` \u2014 Gamma: line width (0\u2013100)\n\n**Nose Contouring**\n- `NOSE_SHADING_FULL_BASIC` (gamma = 0)\n- `NOSE_SHADING_LONG_BASIC` (gamma = 0)\n- `NOSE_SHADING_SHORT_BASIC` (gamma = 0)\n\n**Blusher**\n- `BLUSHER_SIDE_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_CENTER_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_TOP_SLIM_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_SIDE_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_CENTER_BASIC` (gamma = 0)\n\n**Highlighter**\n- `HIGHLIGHTER_EYES_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHEEKBONE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSE_BRIDGE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSETIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_FOREHEAD_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_EYELID_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_INNEREYE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHINTIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n\n**Lip**\n- `LIP_FULL_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n- `LIP_THIN_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n\n---\n\n## Output Instruction\n\n- Wrap your final answer in `<answer></answer>` tags.\n- Always output a **JSON list** with **one or more objects**.\n- Output **only** the JSON (no explanations, names, or extra text).\n\n---\n\n## Example Output\n\n```json\n<answer>\n[\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 127,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>\n<|im_end|>\n<|im_start|>user\n<|vision_start|><|image_pad|><|vision_end|>\nAnalyze the attached face image and output a JSON list (length \u2265 1) of parameter sets that best match the observed makeup.\n\nOutput rules:\n- Return ONLY a JSON list wrapped in <answer>\u2026</answer>.\n- Each object must have the following fields:\n  {\n    \"shape\": <a valid shape from the Detailed Makeup Shape Reference>,\n    \"color\": {\"r\": 0\u2013255, \"g\": 0\u2013255, \"b\": 0\u2013255} (integers),\n    \"alpha\": 0\u2013255 (integer),\n    \"sigma\": integer,\n    \"gamma\": integer (if the shape defines gamma, use its value; if not, set gamma = 0)\n  }\n- Do not include explanations or extra text.\n<|im_end|>\n<|im_start|>assistant\n", "<answer>\n[\n  {\n    \"shape\": \"FACE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 255,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYEBROW_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 255,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYESHADOW_OVEREYE_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 255,\n    \"sigma\": 255,\n    \"gamma\": 100\n  },\n  {\n    \"shape\": \"NOSE_SHADING_LONG_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 255,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 127,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_THIN_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 0\n  }\n]\n</answer>", 0.20000000298023224, -0.7009363770484924, "Image"], ["400", "<|im_start|>system\n\nA conversation between User and Assistant.\n\nThe User will provide an **image of a person with makeup applied**.\nThe Assistant will be provided with a **list of candidate makeup product options**.\n\nYour task is to:\n1. Analyze the makeup look in the image.\n2. Compare it against the provided product options.\n3. Output a JSON list of parameter sets that best represent the makeup observed.\n\n---\n\n## Makeup Option Format\n\nEach output object must follow this exact structure:\n\n- **shape**: Makeup shape (string, must match one from the shape reference below).\n- **color**: RGB values with keys \"r\", \"g\", \"b\", each between 0\u2013255.\n- **alpha**: Integer between 0\u2013255 (opacity).\n- **sigma**: Integer (blur strength).\n- **gamma**: Integer. If a shape does not define a gamma meaning in the reference, set **gamma = 0**.\n\n---\n\n## Detailed Makeup Shape Reference\n\n**Base / Face**\n- `FACE_BASIC` \u2014 Gamma: removes pixels darker than this HSV value\n\n**Eyebrow**\n- `EYEBROW_BASIC` (gamma = 0)\n\n**Eyeshadow**\n- `EYESHADOW_OVEREYE_FULL_BASIC` \u2014 Gamma: width (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_BASIC` (gamma = 0)\n- `EYESHADOW_OVEREYE_OUTER_BASIC` (gamma = 0)\n- `EYESHADOW_INNEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_TRI_BASIC` (gamma = 0)\n\n**Shimmer pearl Eyeshadows**\n- `EYESHADOW_OVEREYE_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_OUTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_INNEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_LOWEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n\n**Glitter Eyeshadows**\n- `EYESHADOW_OVEREYE_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_CENTER_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_OUTER_GL` - Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_LOWEREYE_GL` - Alpha: glitter amount, Gamma: glitter brightness\n\n**Eyeliner**\n- `EYELINER_FILL_BASIC` \u2014 Gamma: line width (0\u2013100)\n- `EYELINER_TAIL_DOWN_SHORT_BASIC` \u2014 Gamma: line width (0\u2013100)\n\n**Nose Contouring**\n- `NOSE_SHADING_FULL_BASIC` (gamma = 0)\n- `NOSE_SHADING_LONG_BASIC` (gamma = 0)\n- `NOSE_SHADING_SHORT_BASIC` (gamma = 0)\n\n**Blusher**\n- `BLUSHER_SIDE_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_CENTER_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_TOP_SLIM_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_SIDE_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_CENTER_BASIC` (gamma = 0)\n\n**Highlighter**\n- `HIGHLIGHTER_EYES_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHEEKBONE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSE_BRIDGE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSETIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_FOREHEAD_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_EYELID_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_INNEREYE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHINTIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n\n**Lip**\n- `LIP_FULL_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n- `LIP_THIN_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n\n---\n\n## Output Instruction\n\n- Wrap your final answer in `<answer></answer>` tags.\n- Always output a **JSON list** with **one or more objects**.\n- Output **only** the JSON (no explanations, names, or extra text).\n\n---\n\n## Example Output\n\n```json\n<answer>\n[\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 127,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>\n<|im_end|>\n<|im_start|>user\n<|vision_start|><|image_pad|><|vision_end|>\nAnalyze the attached face image and output a JSON list (length \u2265 1) of parameter sets that best match the observed makeup.\n\nOutput rules:\n- Return ONLY a JSON list wrapped in <answer>\u2026</answer>.\n- Each object must have the following fields:\n  {\n    \"shape\": <a valid shape from the Detailed Makeup Shape Reference>,\n    \"color\": {\"r\": 0\u2013255, \"g\": 0\u2013255, \"b\": 0\u2013255} (integers),\n    \"alpha\": 0\u2013255 (integer),\n    \"sigma\": integer,\n    \"gamma\": integer (if the shape defines gamma, use its value; if not, set gamma = 0)\n  }\n- Do not include explanations or extra text.\n<|im_end|>\n<|im_start|>assistant\n", "<answer>\n[\n  {\n    \"shape\": \"FACE_BASIC\",\n    \"color\": { \"r\": 162, \"g\": 162, \"b\": 162 },\n    \"alpha\": 163,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYEBROW_BASIC\",\n    \"color\": { \"r\": 113, \"g\": 113, \"b\": 113 },\n    \"alpha\": 127,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYESHADOW_OVEREYE_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 128,\n    \"sigma\": 128,\n    \"gamma\": 64\n  },\n  {\n    \"shape\": \"NOSE_SHADING_FULL_BASIC\",\n    \"color\": { \"r\": 162, \"g\": 162, \"b\": 162 },\n    \"alpha\": 128,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>", 0.20000000298023224, 1.221034288406372, "Image"], ["400", "<|im_start|>system\n\nA conversation between User and Assistant.\n\nThe User will provide an **image of a person with makeup applied**.\nThe Assistant will be provided with a **list of candidate makeup product options**.\n\nYour task is to:\n1. Analyze the makeup look in the image.\n2. Compare it against the provided product options.\n3. Output a JSON list of parameter sets that best represent the makeup observed.\n\n---\n\n## Makeup Option Format\n\nEach output object must follow this exact structure:\n\n- **shape**: Makeup shape (string, must match one from the shape reference below).\n- **color**: RGB values with keys \"r\", \"g\", \"b\", each between 0\u2013255.\n- **alpha**: Integer between 0\u2013255 (opacity).\n- **sigma**: Integer (blur strength).\n- **gamma**: Integer. If a shape does not define a gamma meaning in the reference, set **gamma = 0**.\n\n---\n\n## Detailed Makeup Shape Reference\n\n**Base / Face**\n- `FACE_BASIC` \u2014 Gamma: removes pixels darker than this HSV value\n\n**Eyebrow**\n- `EYEBROW_BASIC` (gamma = 0)\n\n**Eyeshadow**\n- `EYESHADOW_OVEREYE_FULL_BASIC` \u2014 Gamma: width (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_BASIC` (gamma = 0)\n- `EYESHADOW_OVEREYE_OUTER_BASIC` (gamma = 0)\n- `EYESHADOW_INNEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_TRI_BASIC` (gamma = 0)\n\n**Shimmer pearl Eyeshadows**\n- `EYESHADOW_OVEREYE_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_OUTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_INNEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_LOWEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n\n**Glitter Eyeshadows**\n- `EYESHADOW_OVEREYE_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_CENTER_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_OUTER_GL` - Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_LOWEREYE_GL` - Alpha: glitter amount, Gamma: glitter brightness\n\n**Eyeliner**\n- `EYELINER_FILL_BASIC` \u2014 Gamma: line width (0\u2013100)\n- `EYELINER_TAIL_DOWN_SHORT_BASIC` \u2014 Gamma: line width (0\u2013100)\n\n**Nose Contouring**\n- `NOSE_SHADING_FULL_BASIC` (gamma = 0)\n- `NOSE_SHADING_LONG_BASIC` (gamma = 0)\n- `NOSE_SHADING_SHORT_BASIC` (gamma = 0)\n\n**Blusher**\n- `BLUSHER_SIDE_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_CENTER_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_TOP_SLIM_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_SIDE_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_CENTER_BASIC` (gamma = 0)\n\n**Highlighter**\n- `HIGHLIGHTER_EYES_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHEEKBONE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSE_BRIDGE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSETIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_FOREHEAD_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_EYELID_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_INNEREYE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHINTIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n\n**Lip**\n- `LIP_FULL_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n- `LIP_THIN_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n\n---\n\n## Output Instruction\n\n- Wrap your final answer in `<answer></answer>` tags.\n- Always output a **JSON list** with **one or more objects**.\n- Output **only** the JSON (no explanations, names, or extra text).\n\n---\n\n## Example Output\n\n```json\n<answer>\n[\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 127,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>\n<|im_end|>\n<|im_start|>user\n<|vision_start|><|image_pad|><|vision_end|>\nAnalyze the attached face image and output a JSON list (length \u2265 1) of parameter sets that best match the observed makeup.\n\nOutput rules:\n- Return ONLY a JSON list wrapped in <answer>\u2026</answer>.\n- Each object must have the following fields:\n  {\n    \"shape\": <a valid shape from the Detailed Makeup Shape Reference>,\n    \"color\": {\"r\": 0\u2013255, \"g\": 0\u2013255, \"b\": 0\u2013255} (integers),\n    \"alpha\": 0\u2013255 (integer),\n    \"sigma\": integer,\n    \"gamma\": integer (if the shape defines gamma, use its value; if not, set gamma = 0)\n  }\n- Do not include explanations or extra text.\n<|im_end|>\n<|im_start|>assistant\n", "<answer>\n[\n  {\n    \"shape\": \"FACE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 128,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"NOSE_SHADING_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 128,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYELINER_FILL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 128,\n    \"sigma\": 255,\n    \"gamma\": 1\n  },\n  {\n    \"shape\": \"HIGHLIGHTER_EYES_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 128,\n    \"sigma\": 255,\n    \"gamma\": 1\n  },\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 128,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 128,\n    \"sigma\": 255,\n    \"gamma\": 1\n  }\n]\n</answer>", 0.20000000298023224, -0.9213002920150757, "Image"], ["400", "<|im_start|>system\n\nA conversation between User and Assistant.\n\nThe User will provide an **image of a person with makeup applied**.\nThe Assistant will be provided with a **list of candidate makeup product options**.\n\nYour task is to:\n1. Analyze the makeup look in the image.\n2. Compare it against the provided product options.\n3. Output a JSON list of parameter sets that best represent the makeup observed.\n\n---\n\n## Makeup Option Format\n\nEach output object must follow this exact structure:\n\n- **shape**: Makeup shape (string, must match one from the shape reference below).\n- **color**: RGB values with keys \"r\", \"g\", \"b\", each between 0\u2013255.\n- **alpha**: Integer between 0\u2013255 (opacity).\n- **sigma**: Integer (blur strength).\n- **gamma**: Integer. If a shape does not define a gamma meaning in the reference, set **gamma = 0**.\n\n---\n\n## Detailed Makeup Shape Reference\n\n**Base / Face**\n- `FACE_BASIC` \u2014 Gamma: removes pixels darker than this HSV value\n\n**Eyebrow**\n- `EYEBROW_BASIC` (gamma = 0)\n\n**Eyeshadow**\n- `EYESHADOW_OVEREYE_FULL_BASIC` \u2014 Gamma: width (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_BASIC` (gamma = 0)\n- `EYESHADOW_OVEREYE_OUTER_BASIC` (gamma = 0)\n- `EYESHADOW_INNEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_TRI_BASIC` (gamma = 0)\n\n**Shimmer pearl Eyeshadows**\n- `EYESHADOW_OVEREYE_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_OUTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_INNEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_LOWEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n\n**Glitter Eyeshadows**\n- `EYESHADOW_OVEREYE_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_CENTER_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_OUTER_GL` - Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_LOWEREYE_GL` - Alpha: glitter amount, Gamma: glitter brightness\n\n**Eyeliner**\n- `EYELINER_FILL_BASIC` \u2014 Gamma: line width (0\u2013100)\n- `EYELINER_TAIL_DOWN_SHORT_BASIC` \u2014 Gamma: line width (0\u2013100)\n\n**Nose Contouring**\n- `NOSE_SHADING_FULL_BASIC` (gamma = 0)\n- `NOSE_SHADING_LONG_BASIC` (gamma = 0)\n- `NOSE_SHADING_SHORT_BASIC` (gamma = 0)\n\n**Blusher**\n- `BLUSHER_SIDE_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_CENTER_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_TOP_SLIM_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_SIDE_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_CENTER_BASIC` (gamma = 0)\n\n**Highlighter**\n- `HIGHLIGHTER_EYES_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHEEKBONE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSE_BRIDGE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSETIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_FOREHEAD_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_EYELID_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_INNEREYE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHINTIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n\n**Lip**\n- `LIP_FULL_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n- `LIP_THIN_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n\n---\n\n## Output Instruction\n\n- Wrap your final answer in `<answer></answer>` tags.\n- Always output a **JSON list** with **one or more objects**.\n- Output **only** the JSON (no explanations, names, or extra text).\n\n---\n\n## Example Output\n\n```json\n<answer>\n[\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 127,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>\n<|im_end|>\n<|im_start|>user\n<|vision_start|><|image_pad|><|vision_end|>\nAnalyze the attached face image and output a JSON list (length \u2265 1) of parameter sets that best match the observed makeup.\n\nOutput rules:\n- Return ONLY a JSON list wrapped in <answer>\u2026</answer>.\n- Each object must have the following fields:\n  {\n    \"shape\": <a valid shape from the Detailed Makeup Shape Reference>,\n    \"color\": {\"r\": 0\u2013255, \"g\": 0\u2013255, \"b\": 0\u2013255} (integers),\n    \"alpha\": 0\u2013255 (integer),\n    \"sigma\": integer,\n    \"gamma\": integer (if the shape defines gamma, use its value; if not, set gamma = 0)\n  }\n- Do not include explanations or extra text.\n<|im_end|>\n<|im_start|>assistant\n", "<answer>\n[\n  {\n    \"shape\": \"FACE_BASIC\",\n    \"color\": { \"r\": 155, \"g\": 155, \"b\": 155 },\n    \"alpha\": 127,\n    \"sigma\": 16,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYEBROW_BASIC\",\n    \"color\": { \"r\": 149, \"g\": 149, \"b\": 149 },\n    \"alpha\": 127,\n    \"sigma\": 16,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYESHADOW_OVEREYE_FULL_BASIC\",\n    \"color\": { \"r\": 240, \"g\": 240, \"b\": 240 },\n    \"alpha\": 127,\n    \"sigma\": 32,\n    \"gamma\": 30\n  },\n  {\n    \"shape\": \"NOSE_SHADING_FULL_BASIC\",\n    \"color\": { \"r\": 153, \"g\": 153, \"b\": 153 },\n    \"alpha\": 127,\n    \"sigma\": 32,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 127,\n    \"sigma\": 32,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>", 0.20000000298023224, 1.2337549924850464, "Image"], ["400", "<|im_start|>system\n\nA conversation between User and Assistant.\n\nThe User will provide an **image of a person with makeup applied**.\nThe Assistant will be provided with a **list of candidate makeup product options**.\n\nYour task is to:\n1. Analyze the makeup look in the image.\n2. Compare it against the provided product options.\n3. Output a JSON list of parameter sets that best represent the makeup observed.\n\n---\n\n## Makeup Option Format\n\nEach output object must follow this exact structure:\n\n- **shape**: Makeup shape (string, must match one from the shape reference below).\n- **color**: RGB values with keys \"r\", \"g\", \"b\", each between 0\u2013255.\n- **alpha**: Integer between 0\u2013255 (opacity).\n- **sigma**: Integer (blur strength).\n- **gamma**: Integer. If a shape does not define a gamma meaning in the reference, set **gamma = 0**.\n\n---\n\n## Detailed Makeup Shape Reference\n\n**Base / Face**\n- `FACE_BASIC` \u2014 Gamma: removes pixels darker than this HSV value\n\n**Eyebrow**\n- `EYEBROW_BASIC` (gamma = 0)\n\n**Eyeshadow**\n- `EYESHADOW_OVEREYE_FULL_BASIC` \u2014 Gamma: width (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_BASIC` (gamma = 0)\n- `EYESHADOW_OVEREYE_OUTER_BASIC` (gamma = 0)\n- `EYESHADOW_INNEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_TRI_BASIC` (gamma = 0)\n\n**Shimmer pearl Eyeshadows**\n- `EYESHADOW_OVEREYE_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_OUTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_INNEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_LOWEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n\n**Glitter Eyeshadows**\n- `EYESHADOW_OVEREYE_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_CENTER_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_OUTER_GL` - Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_LOWEREYE_GL` - Alpha: glitter amount, Gamma: glitter brightness\n\n**Eyeliner**\n- `EYELINER_FILL_BASIC` \u2014 Gamma: line width (0\u2013100)\n- `EYELINER_TAIL_DOWN_SHORT_BASIC` \u2014 Gamma: line width (0\u2013100)\n\n**Nose Contouring**\n- `NOSE_SHADING_FULL_BASIC` (gamma = 0)\n- `NOSE_SHADING_LONG_BASIC` (gamma = 0)\n- `NOSE_SHADING_SHORT_BASIC` (gamma = 0)\n\n**Blusher**\n- `BLUSHER_SIDE_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_CENTER_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_TOP_SLIM_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_SIDE_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_CENTER_BASIC` (gamma = 0)\n\n**Highlighter**\n- `HIGHLIGHTER_EYES_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHEEKBONE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSE_BRIDGE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSETIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_FOREHEAD_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_EYELID_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_INNEREYE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHINTIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n\n**Lip**\n- `LIP_FULL_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n- `LIP_THIN_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n\n---\n\n## Output Instruction\n\n- Wrap your final answer in `<answer></answer>` tags.\n- Always output a **JSON list** with **one or more objects**.\n- Output **only** the JSON (no explanations, names, or extra text).\n\n---\n\n## Example Output\n\n```json\n<answer>\n[\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 127,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>\n<|im_end|>\n<|im_start|>user\n<|vision_start|><|image_pad|><|vision_end|>\nAnalyze the attached face image and output a JSON list (length \u2265 1) of parameter sets that best match the observed makeup.\n\nOutput rules:\n- Return ONLY a JSON list wrapped in <answer>\u2026</answer>.\n- Each object must have the following fields:\n  {\n    \"shape\": <a valid shape from the Detailed Makeup Shape Reference>,\n    \"color\": {\"r\": 0\u2013255, \"g\": 0\u2013255, \"b\": 0\u2013255} (integers),\n    \"alpha\": 0\u2013255 (integer),\n    \"sigma\": integer,\n    \"gamma\": integer (if the shape defines gamma, use its value; if not, set gamma = 0)\n  }\n- Do not include explanations or extra text.\n<|im_end|>\n<|im_start|>assistant\n", "<answer>\n[\n  {\n    \"shape\": \"FACE_BASIC\",\n    \"color\": {\"r\": 255, \"g\": 255, \"b\": 255},\n    \"alpha\": 255,\n    \"sigma\": 128,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYEBROW_BASIC\",\n    \"color\": {\"r\": 255, \"g\": 255, \"b\": 255},\n    \"alpha\": 255,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYESHADOW_OVEREYE_FULL_BASIC\",\n    \"color\": {\"r\": 240, \"g\": 176, \"b\": 148},\n    \"alpha\": 255,\n    \"sigma\": 128,\n    \"gamma\": 70\n  },\n  {\n    \"shape\": \"NOSE_SHADING_FULL_BASIC\",\n    \"color\": {\"r\": 255, \"g\": 255, \"b\": 255},\n    \"alpha\": 255,\n    \"sigma\": 128,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": {\"r\": 255, \"g\": 255, \"b\": 255},\n    \"alpha\": 128,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": {\"r\": 255, \"g\": 155, \"b\": 123},\n    \"alpha\": 255,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>", 0.20000000298023224, -0.03793768957257271, "Image"], ["400", "<|im_start|>system\n\nA conversation between User and Assistant.\n\nThe User will provide an **image of a person with makeup applied**.\nThe Assistant will be provided with a **list of candidate makeup product options**.\n\nYour task is to:\n1. Analyze the makeup look in the image.\n2. Compare it against the provided product options.\n3. Output a JSON list of parameter sets that best represent the makeup observed.\n\n---\n\n## Makeup Option Format\n\nEach output object must follow this exact structure:\n\n- **shape**: Makeup shape (string, must match one from the shape reference below).\n- **color**: RGB values with keys \"r\", \"g\", \"b\", each between 0\u2013255.\n- **alpha**: Integer between 0\u2013255 (opacity).\n- **sigma**: Integer (blur strength).\n- **gamma**: Integer. If a shape does not define a gamma meaning in the reference, set **gamma = 0**.\n\n---\n\n## Detailed Makeup Shape Reference\n\n**Base / Face**\n- `FACE_BASIC` \u2014 Gamma: removes pixels darker than this HSV value\n\n**Eyebrow**\n- `EYEBROW_BASIC` (gamma = 0)\n\n**Eyeshadow**\n- `EYESHADOW_OVEREYE_FULL_BASIC` \u2014 Gamma: width (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_BASIC` (gamma = 0)\n- `EYESHADOW_OVEREYE_OUTER_BASIC` (gamma = 0)\n- `EYESHADOW_INNEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_TRI_BASIC` (gamma = 0)\n\n**Shimmer pearl Eyeshadows**\n- `EYESHADOW_OVEREYE_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_OUTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_INNEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_LOWEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n\n**Glitter Eyeshadows**\n- `EYESHADOW_OVEREYE_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_CENTER_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_OUTER_GL` - Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_LOWEREYE_GL` - Alpha: glitter amount, Gamma: glitter brightness\n\n**Eyeliner**\n- `EYELINER_FILL_BASIC` \u2014 Gamma: line width (0\u2013100)\n- `EYELINER_TAIL_DOWN_SHORT_BASIC` \u2014 Gamma: line width (0\u2013100)\n\n**Nose Contouring**\n- `NOSE_SHADING_FULL_BASIC` (gamma = 0)\n- `NOSE_SHADING_LONG_BASIC` (gamma = 0)\n- `NOSE_SHADING_SHORT_BASIC` (gamma = 0)\n\n**Blusher**\n- `BLUSHER_SIDE_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_CENTER_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_TOP_SLIM_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_SIDE_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_CENTER_BASIC` (gamma = 0)\n\n**Highlighter**\n- `HIGHLIGHTER_EYES_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHEEKBONE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSE_BRIDGE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSETIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_FOREHEAD_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_EYELID_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_INNEREYE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHINTIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n\n**Lip**\n- `LIP_FULL_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n- `LIP_THIN_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n\n---\n\n## Output Instruction\n\n- Wrap your final answer in `<answer></answer>` tags.\n- Always output a **JSON list** with **one or more objects**.\n- Output **only** the JSON (no explanations, names, or extra text).\n\n---\n\n## Example Output\n\n```json\n<answer>\n[\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 127,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>\n<|im_end|>\n<|im_start|>user\n<|vision_start|><|image_pad|><|vision_end|>\nAnalyze the attached face image and output a JSON list (length \u2265 1) of parameter sets that best match the observed makeup.\n\nOutput rules:\n- Return ONLY a JSON list wrapped in <answer>\u2026</answer>.\n- Each object must have the following fields:\n  {\n    \"shape\": <a valid shape from the Detailed Makeup Shape Reference>,\n    \"color\": {\"r\": 0\u2013255, \"g\": 0\u2013255, \"b\": 0\u2013255} (integers),\n    \"alpha\": 0\u2013255 (integer),\n    \"sigma\": integer,\n    \"gamma\": integer (if the shape defines gamma, use its value; if not, set gamma = 0)\n  }\n- Do not include explanations or extra text.\n<|im_end|>\n<|im_start|>assistant\n", "<answer>\n[\n  {\n    \"shape\": \"EYESHADOW_OVEREYE_FULL_BASIC\",\n    \"color\": { \"r\": 127, \"g\": 127, \"b\": 127 },\n    \"alpha\": 127,\n    \"sigma\": 64,\n    \"gamma\": 100\n  },\n  {\n    \"shape\": \"EYEBROW_BASIC\",\n    \"color\": { \"r\": 102, \"g\": 102, \"b\": 102 },\n    \"alpha\": 127,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"NOSE_SHADING_LONG_BASIC\",\n    \"color\": { \"r\": 204, \"g\": 204, \"b\": 204 },\n    \"alpha\": 127,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"HIGHLIGHTER_EYES_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 127,\n    \"sigma\": 64,\n    \"gamma\": 128\n  }\n]\n</answer>", 0.20000000298023224, -1.2128779888153076, "Image"], ["400", "<|im_start|>system\n\nA conversation between User and Assistant.\n\nThe User will provide an **image of a person with makeup applied**.\nThe Assistant will be provided with a **list of candidate makeup product options**.\n\nYour task is to:\n1. Analyze the makeup look in the image.\n2. Compare it against the provided product options.\n3. Output a JSON list of parameter sets that best represent the makeup observed.\n\n---\n\n## Makeup Option Format\n\nEach output object must follow this exact structure:\n\n- **shape**: Makeup shape (string, must match one from the shape reference below).\n- **color**: RGB values with keys \"r\", \"g\", \"b\", each between 0\u2013255.\n- **alpha**: Integer between 0\u2013255 (opacity).\n- **sigma**: Integer (blur strength).\n- **gamma**: Integer. If a shape does not define a gamma meaning in the reference, set **gamma = 0**.\n\n---\n\n## Detailed Makeup Shape Reference\n\n**Base / Face**\n- `FACE_BASIC` \u2014 Gamma: removes pixels darker than this HSV value\n\n**Eyebrow**\n- `EYEBROW_BASIC` (gamma = 0)\n\n**Eyeshadow**\n- `EYESHADOW_OVEREYE_FULL_BASIC` \u2014 Gamma: width (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_BASIC` (gamma = 0)\n- `EYESHADOW_OVEREYE_OUTER_BASIC` (gamma = 0)\n- `EYESHADOW_INNEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_BASIC` (gamma = 0)\n- `EYESHADOW_LOWEREYE_TRI_BASIC` (gamma = 0)\n\n**Shimmer pearl Eyeshadows**\n- `EYESHADOW_OVEREYE_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_CENTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_OVEREYE_OUTER_SP` \u2014 Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_INNEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n- `EYESHADOW_LOWEREYE_SP` - Gamma: shimmer strength (0\u2013100)\n\n**Glitter Eyeshadows**\n- `EYESHADOW_OVEREYE_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_CENTER_GL` \u2014 Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_OVEREYE_OUTER_GL` - Alpha: glitter amount, Gamma: glitter brightness\n- `EYESHADOW_LOWEREYE_GL` - Alpha: glitter amount, Gamma: glitter brightness\n\n**Eyeliner**\n- `EYELINER_FILL_BASIC` \u2014 Gamma: line width (0\u2013100)\n- `EYELINER_TAIL_DOWN_SHORT_BASIC` \u2014 Gamma: line width (0\u2013100)\n\n**Nose Contouring**\n- `NOSE_SHADING_FULL_BASIC` (gamma = 0)\n- `NOSE_SHADING_LONG_BASIC` (gamma = 0)\n- `NOSE_SHADING_SHORT_BASIC` (gamma = 0)\n\n**Blusher**\n- `BLUSHER_SIDE_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_CENTER_WIDE_BASIC` (gamma = 0)\n- `BLUSHER_TOP_SLIM_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_SIDE_BASIC` (gamma = 0)\n- `BLUSHER_GEN_Z_CENTER_BASIC` (gamma = 0)\n\n**Highlighter**\n- `HIGHLIGHTER_EYES_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHEEKBONE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSE_BRIDGE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_NOSETIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_FOREHEAD_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_EYELID_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_INNEREYE_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n- `HIGHLIGHTER_CHINTIP_BASIC` \u2014 Gamma: only affects pixels brighter than this luma value\n\n**Lip**\n- `LIP_FULL_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n- `LIP_THIN_BASIC` \u2014 Gamma: gloss level (0\u20135 recommended)\n\n---\n\n## Output Instruction\n\n- Wrap your final answer in `<answer></answer>` tags.\n- Always output a **JSON list** with **one or more objects**.\n- Output **only** the JSON (no explanations, names, or extra text).\n\n---\n\n## Example Output\n\n```json\n<answer>\n[\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 127,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 155,\n    \"sigma\": 64,\n    \"gamma\": 1\n  }\n]\n</answer>\n<|im_end|>\n<|im_start|>user\n<|vision_start|><|image_pad|><|vision_end|>\nAnalyze the attached face image and output a JSON list (length \u2265 1) of parameter sets that best match the observed makeup.\n\nOutput rules:\n- Return ONLY a JSON list wrapped in <answer>\u2026</answer>.\n- Each object must have the following fields:\n  {\n    \"shape\": <a valid shape from the Detailed Makeup Shape Reference>,\n    \"color\": {\"r\": 0\u2013255, \"g\": 0\u2013255, \"b\": 0\u2013255} (integers),\n    \"alpha\": 0\u2013255 (integer),\n    \"sigma\": integer,\n    \"gamma\": integer (if the shape defines gamma, use its value; if not, set gamma = 0)\n  }\n- Do not include explanations or extra text.\n<|im_end|>\n<|im_start|>assistant\n", "<answer>\n[\n  {\n    \"shape\": \"FACE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 255, \"b\": 255 },\n    \"alpha\": 255,\n    \"sigma\": 64,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYEBROW_BASIC\",\n    \"color\": { \"r\": 187, \"g\": 187, \"b\": 187 },\n    \"alpha\": 255,\n    \"sigma\": 128,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"EYESHADOW_OVEREYE_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 180, \"b\": 160 },\n    \"alpha\": 255,\n    \"sigma\": 128,\n    \"gamma\": 50\n  },\n  {\n    \"shape\": \"NOSE_SHADING_FULL_BASIC\",\n    \"color\": { \"r\": 221, \"g\": 221, \"b\": 221 },\n    \"alpha\": 255,\n    \"sigma\": 128,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"BLUSHER_CENTER_WIDE_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 156, \"b\": 147 },\n    \"alpha\": 255,\n    \"sigma\": 255,\n    \"gamma\": 0\n  },\n  {\n    \"shape\": \"LIP_FULL_BASIC\",\n    \"color\": { \"r\": 255, \"g\": 160, \"b\": 152 },\n    \"alpha\": 255,\n    \"sigma\": 128,\n    \"gamma\": 1\n  }\n]\n</answer>", 0.20000000298023224, 0.017061151564121246, "Image"]]}